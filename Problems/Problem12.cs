using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Euler.Solutions
{
    /// <summary>
    /// The sequence of triangle numbers is generated by adding the natural numbers. 
    /// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
    /// The first ten terms would be:
    /// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    /// Let us list the factors of the first seven triangle numbers:
    ///  1: 1
    ///  3: 1,3
    ///  6: 1,2,3,6
    /// 10: 1,2,5,10
    /// 15: 1,3,5,15
    /// 21: 1,3,7,21
    /// 28: 1,2,4,7,14,28
    /// We can see that 28 is the first triangle number to have over five divisors.
    /// What is the value of the first triangle number to have over five hundred divisors?
    ///</summary>
    /// <returns>76576500</returns>
    class Problem12: IProblem
    {
        List<int> primes = new PrimeNumberSieve().TakeWhile(p => p < 10000).ToList();

        public double Execute() // 57 ms.
        {
            int i = 1;
            int triangle = 1;
            while (Divisors(triangle) <= 500) triangle += ++i;
            return triangle;
        }

        /// <summary>
        /// The Divisor function counts the nr of divisors of a number. (see http://en.wikipedia.org/wiki/Divisor_function#Table_of_values)
        /// First the number is factorized in prime numbers.(ontbinden in factoren).
        /// Then one is added to the exponent of each prime number before the exponents are multiplied.
        /// i.e. 24 = 2^3 * 3^1   => nr of divisors = (3+1)(1+1) = 8
        /// </summary>
        /// <returns></returns>
        private int Divisors(int number) // 57 ms.   
        {
            int count = 1;
            foreach (var prime in primes)
            {
                int exp = 1;
                while (number % prime == 0)
                {
                    number /= prime;
                    exp++;
                }
                count *= exp;
                if (number == 1) return count;
            }
            return count;
        }
        //
        // Alternatives
        //
        private int Divisorsold(int number) // 301 ms.
        {
            int d = 2;
            int cnt = 2;
            int sqrt = (int)Math.Sqrt(number);
            while (d < sqrt) if (number % d++ == 0) cnt += 2;
            return cnt;
        }
        public double ExecuteBruteForce()   // 2434335 ms.
        {
            int result = 0;
            int triangle = 0;
            for (int i = 1; i < 2000000; i++)
            {
                triangle += i;
                int nrofdivs = 0;
                for (int j = triangle; j > 1; j--)
                {
                    if (triangle % j == 0)
                    {
                        nrofdivs++;
                        if (nrofdivs > 500) return triangle;
                    }
                }
            }
            return result;
        }
    }
}
